<img src="https://r2cdn.perplexity.ai/pplx-full-logo-primary-dark%402x.png" class="logo" width="120"/>

# Documentação das Requisições HTTP – Projeto ESP32

Esta documentação descreve as rotas HTTP implementadas no firmware do ESP32, detalhando os formatos de requisição e resposta esperados, parâmetros, exemplos e comportamentos de erro. O objetivo é orientar desenvolvedores e integradores sobre como interagir corretamente com o sistema.

## Sumário

- [Rotas HTTP Disponíveis](#rotas-http-dispon%C3%ADveis)
- [Formato das Requisições e Respostas](#formato-das-requisi%C3%A7%C3%B5es-e-respostas)
    - [/set_umidade](#set_umidade)
    - [/status](#status)
    - [/restart](#restart)
- [Envio de Dados ao Backend](#envio-de-dados-ao-backend)
- [Códigos de Resposta HTTP](#c%C3%B3digos-de-resposta-http)
- [Exemplos de Uso](#exemplos-de-uso)
- [Observações Técnicas](#observa%C3%A7%C3%B5es-t%C3%A9cnicas)


## Rotas HTTP Disponíveis

| Rota | Método | Parâmetros | Descrição |
| :-- | :-- | :-- | :-- |
| `/set_umidade` | GET | valor (query) | Define novo limiar de umidade |
| `/status` | GET | — | Retorna status atual dos sensores e relé |
| `/restart` | GET | — | Reinicia o ESP32 remotamente |

## Formato das Requisições e Respostas

### `/set_umidade`

- **Método:** GET
- **Parâmetro obrigatório:** `valor` (inteiro entre 1 e 4095)
- **Função:** Atualiza o limiar de umidade utilizado para controle do relé.


#### Exemplo de Requisição

```
GET /set_umidade?valor=2500 HTTP/1.1
Host: <IP_DO_ESP32>
```


#### Respostas Possíveis

| Código | Content-Type | Corpo da Resposta | Descrição |
| :-- | :-- | :-- | :-- |
| 200 | text/plain | Novo limiar de umidade definido para: 2500 | Sucesso; limiar atualizado |
| 400 | text/plain | Parametro 'valor' ausente. | Parâmetro não enviado |
| 422 | text/plain | Valor inválido para limiar. Use um inteiro entre 1 e 4095. | Valor fora do intervalo ou não numérico |

### `/status`

- **Método:** GET
- **Parâmetro:** Nenhum
- **Função:** Retorna o status atual dos sensores e do relé em formato JSON.


#### Exemplo de Requisição

```
GET /status HTTP/1.1
Host: <IP_DO_ESP32>
```


#### Exemplo de Resposta

```json
{
  "umidade": 1987,
  "ldr": 1234,
  "rele": 0,
  "umidade_limiar": 2500
}
```

| Campo | Tipo | Descrição |
| :-- | :-- | :-- |
| umidade | int | Valor lido no sensor de umidade (ADC) |
| ldr | int | Valor lido no sensor de luminosidade (ADC) |
| rele | bool | Estado do relé (0: desligado, 1: ligado) |
| umidade_limiar | int | Limiar atual de umidade configurado |

### `/restart`

- **Método:** GET
- **Parâmetro:** Nenhum
- **Função:** Reinicia o ESP32 remotamente.


#### Exemplo de Requisição

```
GET /restart HTTP/1.1
Host: <IP_DO_ESP32>
```


#### Resposta

| Código | Content-Type | Corpo da Resposta | Descrição |
| :-- | :-- | :-- | :-- |
| 200 | text/plain | Reiniciando ESP32... | Comando aceito, ESP32 será reiniciado |

> **Observação:** Após o envio da resposta, o ESP32 executa um reset imediato, interrompendo todas as conexões ativas.

## Envio de Dados ao Backend

- **Função:** Envia, periodicamente, os valores de umidade e LDR para um endpoint HTTP externo.
- **Endpoint configurado:** Definido na variável `backend_url` (exemplo: Webhook.site).
- **Formato do Payload:**

```json
{
  "umidade": <valor_umidade>,
  "ldr": <valor_ldr>
}
```

- **Método:** POST
- **Content-Type:** application/json

*Obs.: O envio está comentado por padrão no loop. Para ativar, descomente a linha correspondente no código.*

## Códigos de Resposta HTTP

- **200 OK:** Requisição processada com sucesso.
- **400 Bad Request:** Parâmetro obrigatório ausente.
- **422 Unprocessable Entity:** Parâmetro enviado inválido (fora do intervalo ou não numérico).


## Exemplos de Uso

### Definir novo limiar de umidade

```bash
curl "http://<IP_DO_ESP32>/set_umidade?valor=3000"
```

Resposta esperada:

```
Novo limiar de umidade definido para: 3000
```


### Obter status atual do sistema

```bash
curl "http://<IP_DO_ESP32>/status"
```

Resposta esperada:

```json
{
  "umidade": 2100,
  "ldr": 1500,
  "rele": 1,
  "umidade_limiar": 3000
}
```


### Reiniciar o ESP32 remotamente

```bash
curl "http://<IP_DO_ESP32>/restart"
```

Resposta esperada:

```
Reiniciando ESP32...
```

> Após o recebimento dessa resposta, o ESP32 será reinicializado e ficará temporariamente indisponível.

## Observações Técnicas

- O ESP32 atua como servidor HTTP na porta 80, respondendo apenas a requisições locais (mesma rede WiFi).
- O parâmetro `umidade_limiar` é mantido apenas em RAM – reinicializações restauram o valor padrão definido no código.
- O backend pode ser alterado conforme necessidade, bastando modificar a variável `backend_url`.
- O controle do relé é automático: se o valor de umidade lido for maior que o limiar, o relé é ativado; caso contrário, é desativado.
- Para integração com outros sistemas, recomenda-se validar sempre os códigos de resposta HTTP e o formato dos dados recebidos.

**Sugestão de Próximo Passo:**
Implemente persistência do valor de `umidade_limiar` na EEPROM, para que o limiar configurado via HTTP não seja perdido após reinicializações. Isso aumenta a robustez do sistema e a experiência do usuário.
